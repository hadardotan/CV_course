"""
ex3 - first cnn

Implement a cnn to

read binary digits (0,1) from mnist, design yourself using 3 inner layers
input ->1-> 2 ->3 ->fully connected with 2(3) nodes .

Learn using a fully connected last layer and then turn into a 1x1 convolution.
so that it can be applied to any size image.
(this i haven't taught yet, but it is not hard)

Play a little with the hyperparameters.
"""

# -*- coding: utf-8 -*-
"""first_cnn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zTn83ONFFBmtWoeBMIoLUfvc9czE0jsb
"""

import numpy as np

import keras

from keras.datasets import mnist
from keras.models import  Model
from keras.layers import Dense, Dropout, Flatten, Input, Activation, Add
from keras.layers import Conv2D

#Load MNIST Data

(x_train, y_train), (x_test, y_test) = mnist.load_data()

train_filter = np.where((y_train == 0 ) | (y_train == 1))
test_filter = np.where((y_test == 0) | (y_test == 1))
x_train, y_train = x_train[train_filter], y_train[train_filter]
x_test, y_test = x_test[test_filter], y_test[test_filter]

num_classes =2
img_rows, img_cols = 28, 28
batch_size = 128
epochs = 12

x_train = x_train.reshape((len(x_train),
                           np.prod(x_train.shape[1:])))
x_test = x_test.reshape((len(x_test),
                           np.prod(x_test.shape[1:])))
input_shape = (img_rows, img_cols, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# convert class vectors to binary class matrices
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

#Build model

input = Input(shape=input_shape)
net = Conv2D(16, (3, 3), padding='same')(input)
net = Activation('relu')(net)
net = Conv2D(1, (3, 3), padding='same')(net)
net = Flatten()(net)
net = Dense(2)(net)
net = Activation('relu')(net)
model = Model(inputs=input, outputs=net)

model.compile(loss='mean_squared_error',
              optimizer='Adam',
              metrics=['accuracy'])

#Train the model
x_train = x_train.reshape(-1,28, 28, 1)
x_test = x_test.reshape(-1,28, 28, 1)


model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test))

# print(model.summary())

score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])